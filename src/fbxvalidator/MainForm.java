/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fbxvalidator;

import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.DirectoryStream;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.json.Json;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObjectBuilder;
import javax.json.JsonWriter;
import javax.json.JsonWriterFactory;
import javax.json.stream.JsonGenerator;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

/**
 *
 * @author Loris
 */
public class MainForm extends javax.swing.JFrame {

    ImageIcon correctIcon;
    ImageIcon wrongIcon;

    String fbxmodelName = null;
    ArrayList<MaterialGroupInfo> materialgroups = null;
    Path[] cTextures = null;

    boolean shouldMTextureSetsBeFilled = false;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        correctIcon = new ImageIcon("correctSmall.png");
        wrongIcon = new ImageIcon("wrongSmall.png");
        materialgroups = new ArrayList<>();
        cTextures = new Path[MainForm.eSuffix.values().length / 2];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textureFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        fbxFileChooser = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        progressBar = new javax.swing.JProgressBar();
        generateJsonButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cTextureSetText = new javax.swing.JLabel();

        {
            Preferences pref = Preferences.userRoot();
            String path = pref.get("TEXTURESLIB_PATH", "");
            textureFileChooser.setCurrentDirectory(new File(path));
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fbxFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fbxFileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fbxFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fbxFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                .addContainerGap())
        );

        {
            FileFilter filter = new FileNameExtensionFilter("FBX File","fbx");
            fbxFileChooser.setFileFilter(filter);

            Preferences pref = Preferences.userRoot();
            String path = pref.get("LASTFBXMODEL_PATH", "");
            fbxFileChooser.setCurrentDirectory(new File(path));
        }

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Material Group", "Is Ok", "Uses C_Texture Set", "M_Texture Set", "M_Texture Set Name", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.getModel().addTableModelListener(new CheckBoxTableModelListener());
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(150);
            table.getColumnModel().getColumn(0).setPreferredWidth(150);
            table.getColumnModel().getColumn(0).setMaxWidth(150);
            table.getColumnModel().getColumn(1).setMinWidth(40);
            table.getColumnModel().getColumn(1).setPreferredWidth(40);
            table.getColumnModel().getColumn(1).setMaxWidth(40);
            table.getColumnModel().getColumn(1).setCellRenderer(new JTableIconRenderer());
            table.getColumnModel().getColumn(2).setMinWidth(110);
            table.getColumnModel().getColumn(2).setPreferredWidth(110);
            table.getColumnModel().getColumn(2).setMaxWidth(110);
            table.getColumnModel().getColumn(3).setMinWidth(150);
            table.getColumnModel().getColumn(3).setPreferredWidth(150);
            table.getColumnModel().getColumn(3).setMaxWidth(150);
            table.getColumnModel().getColumn(3).setCellRenderer(new JTableTextureTypesRenderer());
            table.getColumnModel().getColumn(5).setMinWidth(40);
            table.getColumnModel().getColumn(5).setPreferredWidth(40);
            table.getColumnModel().getColumn(5).setMaxWidth(40);
            table.getColumnModel().getColumn(5).setCellEditor(new JTableChangeButtonEditor(new JTextField()));
            table.getColumnModel().getColumn(5).setCellRenderer(new JTableButtonRenderer("..."));
            table.getColumnModel().getColumn(6).setMinWidth(40);
            table.getColumnModel().getColumn(6).setPreferredWidth(40);
            table.getColumnModel().getColumn(6).setMaxWidth(40);
            table.getColumnModel().getColumn(6).setCellEditor(new JTableDeleteButtonEditor(new JTextField()));
            table.getColumnModel().getColumn(6).setCellRenderer(new JTableButtonRenderer("X"));
        }

        generateJsonButton.setText("Generate JSON");
        generateJsonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateJsonButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("C_Texture Set: ");

        cTextureSetText.setBackground(new java.awt.Color(255, 255, 255));
        cTextureSetText.setOpaque(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(generateJsonButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cTextureSetText, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cTextureSetText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(generateJsonButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fbxFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fbxFileChooserActionPerformed
        File f = fbxFileChooser.getSelectedFile();
        Path filepath = Paths.get(f.getAbsolutePath());

        GetMaterialNamesWorker worker = new GetMaterialNamesWorker(filepath.toString(), this);
        worker.execute();

        Preferences pref = Preferences.userRoot();
        pref.put("LASTFBXMODEL_PATH", filepath.getParent().toString());
        fbxmodelName = removeExtension(filepath.getFileName().toString());
    }//GEN-LAST:event_fbxFileChooserActionPerformed

    private void generateJsonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateJsonButtonActionPerformed

        if (shouldMTextureSetsBeFilled) {
            if (!checkMTextureSetsFilled()) {
                JOptionPane.showMessageDialog(this, "Impossibile procedere. Assicurarsi di aver assegnato un texture set di finitura per ciascun gruppo materiale");
                return;
            }
        }

        Preferences pref = Preferences.userRoot();
        Path path = Paths.get(pref.get("LASTFBXMODEL_PATH", ""));

        // Init additional textures folder
        Path texturesPath = Paths.get(path.toString() + "\\" + fbxmodelName + "_textures");
        if (Files.isDirectory(texturesPath)) {
            try {
                Files.walk(texturesPath)
                        .map(Path::toFile)
                        .peek(System.out::println)
                        .forEach(File::delete);
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                Files.createDirectory(texturesPath);
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        // Init Json writer
        File fOutJson = new File(path + "\\" + fbxmodelName + ".json");
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(fOutJson);
        } catch (FileNotFoundException ex) {
            System.err.println(ex.getMessage());
            return;
        }
        Map<String, Object> properties = new HashMap<>();
        properties.put(JsonGenerator.PRETTY_PRINTING, true);
        JsonWriterFactory writerFactory = Json.createWriterFactory(properties);

        // Write Json file
        try (JsonWriter jsonWriter = writerFactory.createWriter(fos)) {

            JsonObjectBuilder modelBuilder = Json.createObjectBuilder();
            modelBuilder.add("fbxname", fbxmodelName);

            JsonArrayBuilder materialsGroupBuilder = Json.createArrayBuilder();
            for (MaterialGroupInfo materialGroup : materialgroups) {
                JsonObjectBuilder materialGroupBuilder = Json.createObjectBuilder();
                materialGroupBuilder.add("groupname", materialGroup.name);
                boolean isEmpty = true;
                for (int i = 0; i < materialGroup.mTextures.length; i++) {
                    if (materialGroup.mTextures[i] != null) {
                        String textureSuffix = eSuffix.values()[i].name();
                        Path texturePath = materialGroup.mTextures[i];
                        String texturePathString = null;
                        Path textureFileName = texturePath.getFileName();
                        if (texturePath.getParent().equals(path)) {
                            texturePathString = textureFileName.toString();
                        } else {
                            Path newTexturePath = Paths.get(texturesPath + "\\" + textureFileName.toString());
                            copy(texturePath.toString(), newTexturePath.toString());
                            texturePathString = newTexturePath.getParent().getFileName().toString() + "\\" + newTexturePath.getFileName().toString();
                        }
                        materialGroupBuilder.add(textureSuffix, texturePathString);
                        isEmpty = false;
                    }
                }
                if (materialGroup.usesCTexture) {
                    for (int i = 0; i < cTextures.length; i++) {
                        if (cTextures[i] != null) {
                            String textureSuffix = eSuffix.values()[i + eSuffix.values().length / 2].name();
                            Path texturePath = cTextures[i].getFileName();
                            materialGroupBuilder.add(textureSuffix, texturePath.toString());
                            isEmpty = false;
                        }
                    }
                }
                if (!isEmpty) {
                    materialsGroupBuilder.add(materialGroupBuilder);
                }
            }
            modelBuilder.add("materialgroups", materialsGroupBuilder);
            jsonWriter.writeObject(modelBuilder.build());
            JOptionPane.showMessageDialog(this, "Descrittore json generato correttamente");
        }
    }//GEN-LAST:event_generateJsonButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });

        System.loadLibrary("FbxSdkUtilities");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cTextureSetText;
    private javax.swing.JFileChooser fbxFileChooser;
    private javax.swing.JButton generateJsonButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTable table;
    private javax.swing.JFileChooser textureFileChooser;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JProgressBar getProgressBar() {
        return progressBar;
    }

    public void updateTable(String[] stringhe) {

        Preferences pref = Preferences.userRoot();
        Path fbxpath = Paths.get(pref.get("LASTFBXMODEL_PATH", ""));

        materialgroups.clear();
        for (int i = 0; i < cTextures.length; i++) {
            cTextures[i] = null;
        }

        // check if textures in fbx are valid and copy near fbx file if they don't exist yet
        for (int i = 0; i < stringhe.length; i += FbxSdkWrapper.GROUP_SIZE) {

            MaterialGroupInfo materialGroup = new MaterialGroupInfo();
            materialgroups.add(materialGroup);
            materialGroup.name = stringhe[i];

            String diffuse = stringhe[i + 1];
            String diffuseNoPath = removePath(diffuse);
            String diffuseNoPathNoExt = removeExtension(diffuseNoPath);
            String normal = stringhe[i + 2];
            String normalNoPath = removePath(normal);
            String normalNoPathNoExt = removeExtension(normalNoPath);

            materialGroup.isOkIcon = correctIcon;

            if (!diffuseNoPathNoExt.isEmpty()) {
                eSuffix suffix = checkTextureSetName(fbxmodelName, diffuseNoPathNoExt);
                if (suffix != null && suffix != eSuffix.D2) {
                    materialGroup.isOkIcon = wrongIcon;
                } else {
                    if (suffix == null) {
                        suffix = checkTextureSetName(materialGroup.name, diffuseNoPathNoExt);
                    }
                    if (suffix == eSuffix.D2) {
                        materialGroup.usesCTexture = true;
                    }
                    if (suffix == eSuffix.D || suffix == eSuffix.D2) {
                        copy(stringhe[i + 1], fbxpath + "\\" + diffuseNoPath);
                    } else {
                        materialGroup.isOkIcon = wrongIcon;
                    }
                }
            }
            if (!normalNoPathNoExt.isEmpty()) {
                eSuffix suffix = checkTextureSetName(fbxmodelName, normalNoPathNoExt);
                if (suffix != null && suffix != eSuffix.N2) {
                    materialGroup.isOkIcon = wrongIcon;
                } else {
                    if (suffix == null) {
                        suffix = checkTextureSetName(materialGroup.name, normalNoPathNoExt);
                    }
                    if (suffix == eSuffix.N2) {
                        materialGroup.usesCTexture = true;
                    }
                    if (suffix == eSuffix.N || suffix == eSuffix.N2) {
                        copy(stringhe[i + 2], fbxpath + "\\" + normalNoPath);
                    } else {
                        materialGroup.isOkIcon = wrongIcon;
                    }
                }
            }
        }

        HashMap<String, Path> fbxTextures = new HashMap<>();
        collectTextures(fbxpath, fbxTextures);

        // clear table
        ((DefaultTableModel) table.getModel()).setRowCount(0);

        // update table
        for (MaterialGroupInfo materialGroup : materialgroups) {

            setTexturesInfo(materialGroup.name, materialGroup, true, true, fbxTextures);

            // add table row
//            ((DefaultTableModel) table.getModel()).addRow(new Object[]{materialGroup.name, materialGroup.isOkIcon, materialGroup.cTextures, materialGroup.mTextures, materialGroup.mTextureSetName});
            ((DefaultTableModel) table.getModel()).addRow(new Object[]{materialGroup.name, materialGroup.isOkIcon, materialGroup.usesCTexture, materialGroup.mTextures, materialGroup.mTextureSetName});
        }

        // update cTexture Set editbox
        cTextureSetText.setText(formatTextureTypes(cTextures));
    }

    private void collectTextures(Path path, HashMap<String, Path> textures) {
        textures.clear();
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(path, imageExtString)) {
            for (Path entry : stream) {
                textures.put(removeExtension(removePath(entry.toString())), entry);
            }
        } catch (IOException ex) {
            System.err.println(ex.getCause());
            textures.clear();
        }
    }

    private void setTexturesInfo(String mTextureSetName, MaterialGroupInfo materialGroup, boolean doForMTextures, boolean doForCTextures, HashMap<String, Path> textures) {

//        if (doForCTextures) {
//            materialGroup.resetCTextures();
//        }
        if (doForMTextures) {
            materialGroup.resetMTextures();
        }

        for (HashMap.Entry<String, Path> texture : textures.entrySet()) {

            String textureName = texture.getKey();
            Path texturePath = texture.getValue();
            eSuffix suffix = checkTextureSetName(mTextureSetName, textureName);

            if (doForMTextures) {
                if (suffix != null && suffix.ordinal() < eSuffix.values().length / 2) {
                    materialGroup.mTextures[suffix.ordinal()] = texturePath;
                    materialGroup.mTextureSetName = textureName.substring(0, textureName.length() - suffix.toString().length() - 1);
                }
            }

            if (doForCTextures) {
                if (suffix == null) {
                    suffix = checkTextureSetName(fbxmodelName, textureName);
                }
                if (suffix != null && suffix.ordinal() >= eSuffix.values().length / 2) {
                    cTextures[suffix.ordinal() - eSuffix.values().length / 2] = texturePath;
                }
            }
        }
    }

    private void copy(String sfrom, String sto) {
        Path from = Paths.get(sfrom);
        Path to = Paths.get(sto);
        try {
            Files.copy(from, to);
            System.out.println("File copied");
        } catch (FileAlreadyExistsException ex) {
            System.err.println("File not copied: already exists");
        } catch (IOException ex) {
            System.err.println("Can't copy file");
        }
    }

    private String removePath(String string) {
        String[] splitted = string.split("/");
        if (splitted.length == 1) {
            splitted = string.split("\\\\");
        }
        return splitted[splitted.length - 1];
    }

    private String removeExtension(String string) {
        String[] splitted = string.split("\\.");
        if (splitted.length == 1) {
            return splitted[0];
        } else {
            return string.substring(0, string.length() - splitted[splitted.length - 1].length() - 1);
        }
    }

    private eSuffix getSuffix(String string) {
        string = removeExtension(string);
        String[] splitted = string.split("_");
        if (splitted.length > 1) {
            String suffix = splitted[splitted.length - 1];
            int i = 0;
            while (i < eSuffix.values().length && eSuffix.values()[i].name().compareTo(suffix.toUpperCase()) != 0) {
                i++;
            }
            return i == eSuffix.values().length ? null : eSuffix.values()[i];
        } else {
            return null;
        }
    }

    private eSuffix checkTextureSetName(String textureSetName, String textureName) {
        if (textureSetName.length() == 0 || textureName.length() == 0) {
            return null;
        }
        textureSetName = textureSetName.toLowerCase();
        textureName = textureName.toLowerCase();

        eSuffix suffix = getSuffix(textureName);
        if (suffix == null) {
            return null;
        }
        String textureNoSuffix = textureName.substring(0, textureName.length() - suffix.toString().length() - 1);
        if (textureSetName.compareTo(textureNoSuffix) == 0) {
            return suffix;
        }
        return null;
    }

    void changeMTextureSet(int row) {

        // notify that the particular texture group will be overwritten
        MaterialGroupInfo toChange = materialgroups.get(row);
        if (toChange.mTextureSetName != null && toChange.name.toLowerCase().compareTo(toChange.mTextureSetName.toLowerCase()) == 0) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Procedendo, il texture set di finitura consigliato verrà sovrascritto.", "Warning", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }
        }

        int returnVal = textureFileChooser.showOpenDialog(this);
        if (returnVal == textureFileChooser.APPROVE_OPTION) {

            File file = textureFileChooser.getSelectedFile();
            Path path = Paths.get(file.getAbsolutePath());

            eSuffix suffix = getSuffix(path.toString());
            if (suffix == null) {
                JOptionPane.showMessageDialog(this, "Non è un set di texture valido!");
                return;
            }

            String newMTextureSetName = removeExtension(removePath(path.toString()));
            newMTextureSetName = newMTextureSetName.substring(0, newMTextureSetName.length() - suffix.toString().length() - 1);

            path = path.getParent();

            HashMap<String, Path> libraryTextures = new HashMap<>();
            collectTextures(path, libraryTextures);

            setTexturesInfo(newMTextureSetName, toChange, true, false, libraryTextures);
            toChange.mTextureSetName = newMTextureSetName;

            table.getModel().setValueAt(toChange.mTextures, row, eColumns.M_TEXTURE_SET.ordinal());
            table.getModel().setValueAt(toChange.mTextureSetName, row, eColumns.M_TEXTURE_SET_NAME.ordinal());

            Preferences pref = Preferences.userRoot();
            pref.put("TEXTURESLIB_PATH", path.toString());

        } else {
            System.out.println("File access cancelled by user.");
        }
    }

    void deleteMTextureSet(int row) {

        // notify that the particular texture group will be overwritten
        MaterialGroupInfo toChange = materialgroups.get(row);
        if (toChange.mTextureSetName != null && toChange.name.toLowerCase().compareTo(toChange.mTextureSetName.toLowerCase()) == 0) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Procedendo, il texture set di finitura consigliato verrà eliminato.", "Warning", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.NO_OPTION) {
                return;
            }
        }

        toChange.mTextureSetName = null;
        toChange.resetMTextures();
        table.getModel().setValueAt(toChange.mTextures, row, eColumns.M_TEXTURE_SET.ordinal());
        table.getModel().setValueAt(toChange.mTextureSetName, row, eColumns.M_TEXTURE_SET_NAME.ordinal());
    }

    public javax.swing.JFileChooser getFbxFileChooser() {
        return fbxFileChooser;
    }

    private boolean checkMTextureSetsFilled() {
        for (MaterialGroupInfo materialgroup : materialgroups) {
            if (materialgroup.checkMTexturesIsEmpty()) {
                return false;
            }
        }
        return true;
    }

    private class CheckBoxTableModelListener implements TableModelListener {

        @Override
        public void tableChanged(TableModelEvent e) {
            int row = e.getFirstRow();
            int column = e.getColumn();
            if (column == eColumns.USES_C_TEXTURE.ordinal()) {
                TableModel model = (TableModel) e.getSource();
                boolean checkBoxValue = (boolean) model.getValueAt(row, column);
                materialgroups.get(row).usesCTexture = checkBoxValue;
            }
        }
    }

    private class JTableButtonRenderer implements TableCellRenderer {

        String text;

        public JTableButtonRenderer(String text) {
            this.text = text;
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            JButton button = new JButton(text);
            return button;
        }
    }

    private class JTableChangeButtonEditor extends DefaultCellEditor {

        public JTableChangeButtonEditor(JTextField textField) {
            super(textField);
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            JButton button = new JButton("...");
            button.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    changeMTextureSet(row);
                }
            });
            return button;
        }
    }

    private class JTableDeleteButtonEditor extends DefaultCellEditor {

        public JTableDeleteButtonEditor(JTextField textField) {
            super(textField);
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            JButton button = new JButton("X");
            button.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    deleteMTextureSet(row);
                }
            });
            return button;
        }
    }

    private class JTableIconRenderer implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            JLabel label = new JLabel();
            label.setIcon((Icon) value);
            label.setHorizontalAlignment(SwingConstants.CENTER);
            return label;
        }
    }

    private String formatTextureTypes(Path[] paths) {
        String text = "";
        for (int i = 0; i < paths.length; ++i) {
            if (paths[i] != null) {
                text += String.format("<html><b><font color=%s>%s</font></b> ", colors[i], eSuffix.values()[i].name());
            }
//                else {
//                    text += suffixes[i].toLowerCase() + " ";
//                }
        }
        return text;
    }

    private class JTableTextureTypesRenderer implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            JLabel label = new JLabel();
            Path[] paths = (Path[]) value;
            String text = formatTextureTypes(paths);
            label.setText(text);
            return label;
        }
    }

    enum eSuffix {
        D, N, O, M, R, AO, S, E, WO, SC,
        D2, N2, O2, M2, R2, AO2, S2, E2, WO2, SC2
    };

    final String[] colors = {
        "#FF0000",
        "#FF7F00",
        "#EFDF00",
        "#00FF00",
        "#00DFDF",
        "#007FFF",
        "#0000FF",
        "#7F00FF",
        "#FF00FF",
        "#FF007F"
    };

    static String[] imageExt = {
        "bmp",
        "jpg",
        "png"
    };

    enum eColumns {
        MATERIAL_GROUP,
        IS_OK,
        USES_C_TEXTURE,
        M_TEXTURE_SET,
        M_TEXTURE_SET_NAME,
        CHANGE_M_TEXTURE_SET,
        DELETE_M_TEXTURE_SET
    }

    static String imageExtString = null;

    static {
        imageExtString = "*.{" + imageExt[0];
        for (int i = 1; i < imageExt.length; i++) {
            imageExtString += "," + imageExt[i];
        }
        imageExtString += "}";
    }
}
